language: en-US
tone_instructions: ""
early_access: false
enable_free_tier: true
reviews:
  profile: chill
  request_changes_workflow: true
  high_level_summary: true
  poem: true
  high_level_summary_placeholder: "@coderabbitai summary"
  high_level_summary_in_walkthrough: true
  auto_title_placeholder: "@coderabbitai"
  auto_title_instructions: ""
  review_status: true
  commit_status: true
  fail_commit_status: false
  collapse_walkthrough: false
  changed_files_summary: true
  sequence_diagrams: true
  estimate_code_review_effort: true
  assess_linked_issues: true
  related_issues: true
  related_prs: true
  suggested_labels: true
  auto_apply_labels: false
  suggested_reviewers: true
  auto_assign_reviewers: false
  labeling_instructions:
    - label: Python Lang
      instructions: Apply when the PR/MR contains changes to python source-code.
    - label: Bash Lang
      instructions: >-
        Apply when the PR/MR contains changes to shell-scripts or BASH code
        snippets.
    - label: Make Lang
      instructions: >-
        Apply when the PR/MR contains changes to the file `Makefile` or makefile
        code snippets.
    - label: Documentation
      instructions: >-
        Apply whenever project documentation (namely markdown source-code) is
        updated by the PR/MR. Also apply when PR contains a commit with a commit
        message prefixed with "[DOCUMENTATION] "
    - label: Linter
      instructions: >-
        Apply when the purpose of the PR/MR is related to fixing the feedback
        from a linter. Also apply if suggested fixes are used and improve the
        code's compliance with the PEP-8 standard.
  path_filters:
    - "!*.xc*/**"
    - "!node_modules/**"
    - "!dist/**"
    - "!build/**"
    - "!.git/**"
    - "!venv/**"
    - "!__pycache__/**"
  path_instructions:
    - path: README.md
      instructions: >-
        1. Consider the file 'README.md' the overview/introduction of the
        project.
           Also consider the 'README.md' file the first place to look for
        project documentation.

        2. When reviewing the file 'README.md' it should be linted with help
           from the tools `markdownlint` and `languagetool`, pointing out any
        issues.
    - path: "**/*.cs"
      instructions:
        "Focus on major issues impacting readability and maintainability. Avoid
        minor nitpicks."
    - path: "tests/**/*.cs"
      instructions:
        "Review NUnit tests for structure and coverage. Skip minor stylistic
        concerns."
    - path: "**/*.py"
      instructions:
        "Check for major PEP 8 violations and Python best practices. Ignore
        trivial formatting issues."
    - path: "tests/**/*.py"
      instructions:
        "Ensure PyTest tests are clear and comprehensive. Don't focus on minor
        details."
    - path: "**/*.py"
      instructions: >-
        When reviewing Python code for this project:

        1. Prioritize portability over clarity, especially when dealing with
        cross-Python compatibility. However, with the priority in mind, do still
        consider improvements to clarity when relevant.

        2. As a general guideline, consider the code style advocated in the PEP
        8 standard (excluding the use of spaces for indentation) and evaluate
        suggested changes for code style compliance.

        3. As a style convention, consider the code style advocated in
        [CEP-8](https://gist.github.com/reactive-firewall/b7ee98df9e636a51806e62ef9c4ab161)
        and evaluate suggested changes for code style compliance.

        4. As a general guideline, try to provide any relevant, official, and
        supporting documentation links to any tool's suggestions in review
        comments. This guideline is important for posterity.

        5. As a general rule, undocumented function definitions and class
        definitions in the project's Python code are assumed incomplete. Please
        consider suggesting a short summary of the code for any of these
        incomplete definitions as docstrings when reviewing.

        6. Verify Flake8's configuration file is located at ".flake8.ini"

        When reviewing test code:

        1. Prioritize portability over clarity, especially when dealing with
        cross-Python compatibility. However, with the priority in mind, do still
        consider improvements to clarity when relevant.

        2. As a general guideline, consider the code style advocated in the PEP
        8 standard (excluding the use of spaces for indentation) and evaluate
        suggested changes for code style compliance.

        3. As a style convention, consider the code style advocated in
        [CEP-8](https://gist.github.com/reactive-firewall/b7ee98df9e636a51806e62ef9c4ab161)
        and evaluate suggested changes for code style compliance, pointing out
        any violations discovered.

        4. As a general guideline, try to provide any relevant, official, and
        supporting documentation links to any tool's suggestions in review
        comments. This guideline is important for posterity.

        5. As a project rule, Python source files with names prefixed by the
        string "test_" and located in the project's "tests" directory are the
        project's unit-testing code. It is safe, albeit a heuristic, to assume
        these are considered part of the project's minimal acceptance testing
        unless a justifying exception to this assumption is documented.

        6. As a project rule, any files without extensions and with names
        prefixed by either the string "check_" or the string "test_", and
        located in the project's "tests" directory, are the project's non-unit
        test code. "Non-unit test" in this context refers to any type of testing
        other than unit testing, such as (but not limited to) functional
        testing, style linting, regression testing, etc. It can also be assumed
        that non-unit testing code is usually written as Bash shell scripts.
    - path: "**/*.js"
      instructions:
        "Review the JavaScript code for conformity with the Google JavaScript
        style guide, highlighting any deviations."
    - path: "**/*.ts"
      instructions: |
        "Review the JavaScript code for conformity with the Google JavaScript style guide, highlighting any deviations. Ensure that:
        - The code adheres to best practices associated with nodejs.
        - The code adheres to best practices associated with nestjs framework.
        - The code adheres to best practices recommended for performance.
        - The code adheres to similar naming conventions for controllers, models, services, methods, variables."
    - path: .github/**
      instructions: >-
        * When the project is hosted on GitHub: All GitHub-specific
        configurations, templates, and tools should be found in the '.github'
        directory tree.

        * 'actionlint' erroneously generates false positives when dealing with
        GitHub's `${{ ... }}` syntax in conditionals.

        * 'actionlint' erroneously generates incorrect solutions when suggesting
        the removal of valid `${{ ... }}` syntax.
  auto_review:
    enabled: true
    ignore_title_keywords:
      - "WIP"
      - "DO NOT MERGE"
      - "audit"
      - "test"
      - "test-suite"
      - "test-suite-audit"
      - "audit-test"
      - "analysis"
      - "analysis-audit"
      - "audit-analysis"
      - "audit-analysis-audit"
      - "audit-analysis-test"
      - "audit-analysis-test-suite"
      - "audit-analysis-test-suite-audit"
    drafts: false
    base_branches:
      - "main"
  abort_on_close: true
  disable_cache: false
chat:
  auto_reply: true
pre_merge_checks:
  docstrings:
    - path: tests/*
      instructions: >-
      mode: warning
      threshold: 80
      title:
        mode: warning
        requirements: ""
      description:
        mode: warning
      issue_assessment:
        mode: warning
      tools:
      languagetool:
        enabled: true
        language: en-US
        configuration:
          level: picky
          mother_tongue: en
          dictionary:
            - "reactive-firewall"
            - "CEP-9"
            - "CEP-8"
            - "CEP-7"
            - "CEP-5"
            - "Shellscript"
            - "bash"
          disabled_rules:
            - EN_QUOTES
            - CONSECUTIVE_SPACES
          enabled_rules:
            - STYLE
            - EN_CONTRACTION_SPELLING
            - EN_WORD_COHERENCY
            - IT_IS_OBVIOUS
            - TWELFTH_OF_NEVER
            - OXFORD_SPELLING
            - PASSIVE_VOICE
      shellcheck:
        enabled: true
      ruff:
        enabled: true
        configuration:
          extend_select:
            - E # Pycodestyle errors (style issues)
            - F # PyFlakes codes (logical errors)
            - W # Pycodestyle warnings
            - N # PEP 8 naming conventions
          ignore:
            - W191
            - W391
            - E117
            - D208
          line_length: 100
          dummy_variable_rgx: "^(_.*|junk|extra)$" # Variables starting with '_' or named 'junk' or 'extras', are considered dummy variables
          external:
            flake8-blind-except: {}
            flake8-docstrings: {}
            flake8-comprehensions: {}
            flake8-debugger: {}
            flake8-eradicate: {}
            # Include other Flake8 plugins as needed
      ast-grep:
        rule_dirs: []
        util_dirs: []
        essential_rules: true
        packages: []
      markdownlint:
        enabled: true
      github-checks:
        enabled: true
        timeout_ms: 90000
      biome:
        enabled: true
      hadolint:
        enabled: true
      swiftlint:
        enabled: true
      phpstan:
        enabled: true
        level: default
      phpmd:
        enabled: true
      phpcs:
        enabled: true
      golangci-lint:
        enabled: true
      yamllint:
        enabled: true
      gitleaks:
        enabled: true
      checkov:
        enabled: true
      detekt:
        enabled: true
      eslint:
        enabled: true
      flake8:
        enabled: true
      rubocop:
        enabled: true
      buf:
        enabled: true
      regal:
        enabled: true
      actionlint:
        enabled: true
      pmd:
        enabled: true
      cppcheck:
        enabled: true
      semgrep:
        enabled: true
      circleci:
        enabled: true
      clippy:
        enabled: true
      sqlfluff:
        enabled: true
      prismaLint:
        enabled: true
      pylint:
        enabled: true
      oxc:
        enabled: true
      shopifyThemeCheck:
        enabled: true
      luacheck:
        enabled: true
      brakeman:
        enabled: true
      dotenvLint:
        enabled: true
      htmlhint:
        enabled: true
      checkmake:
        enabled: true
  integrations:
    jira:
      usage: auto
    linear:
      usage: auto
knowledge_base:
  opt_out: false
  web_search:
    enabled: true
  code_guidelines:
    enabled: true
    filePatterns: []
  learnings:
    scope: auto
  issues:
    scope: auto
  jira:
    usage: auto
    project_keys: []
  linear:
    usage: auto
    team_keys: []
  pull_requests:
    scope: auto
code_generation:
  docstrings:
    language: en-US
    path_instructions: []
  unit_tests:
    path_instructions: []
